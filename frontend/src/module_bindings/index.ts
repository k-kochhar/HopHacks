// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.2 (commit 4b41cf3d71aa85cd4e75c96cbb54324481ee0b27).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { AddTag } from "./add_tag_reducer.ts";
export { AddTag };
import { ClaimTag } from "./claim_tag_reducer.ts";
export { ClaimTag };
import { CreateGame } from "./create_game_reducer.ts";
export { CreateGame };
import { EndGame } from "./end_game_reducer.ts";
export { EndGame };
import { RegisterPlayer } from "./register_player_reducer.ts";
export { RegisterPlayer };
import { SetTagActive } from "./set_tag_active_reducer.ts";
export { SetTagActive };
import { StartGame } from "./start_game_reducer.ts";
export { StartGame };

// Import and reexport all table handle types
import { GamesTableHandle } from "./games_table.ts";
export { GamesTableHandle };
import { PlayersTableHandle } from "./players_table.ts";
export { PlayersTableHandle };
import { ProgressTableHandle } from "./progress_table.ts";
export { ProgressTableHandle };
import { TagsTableHandle } from "./tags_table.ts";
export { TagsTableHandle };

// Import and reexport all types
import { Game } from "./game_type.ts";
export { Game };
import { Player } from "./player_type.ts";
export { Player };
import { Progress } from "./progress_type.ts";
export { Progress };
import { Tag } from "./tag_type.ts";
export { Tag };

const REMOTE_MODULE = {
  tables: {
    games: {
      tableName: "games",
      rowType: Game.getTypeScriptAlgebraicType(),
      primaryKey: "gameId",
      primaryKeyInfo: {
        colName: "gameId",
        colType: Game.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    players: {
      tableName: "players",
      rowType: Player.getTypeScriptAlgebraicType(),
      primaryKey: "playerId",
      primaryKeyInfo: {
        colName: "playerId",
        colType: Player.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    progress: {
      tableName: "progress",
      rowType: Progress.getTypeScriptAlgebraicType(),
    },
    tags: {
      tableName: "tags",
      rowType: Tag.getTypeScriptAlgebraicType(),
      primaryKey: "tagId",
      primaryKeyInfo: {
        colName: "tagId",
        colType: Tag.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    add_tag: {
      reducerName: "add_tag",
      argsType: AddTag.getTypeScriptAlgebraicType(),
    },
    claim_tag: {
      reducerName: "claim_tag",
      argsType: ClaimTag.getTypeScriptAlgebraicType(),
    },
    create_game: {
      reducerName: "create_game",
      argsType: CreateGame.getTypeScriptAlgebraicType(),
    },
    end_game: {
      reducerName: "end_game",
      argsType: EndGame.getTypeScriptAlgebraicType(),
    },
    register_player: {
      reducerName: "register_player",
      argsType: RegisterPlayer.getTypeScriptAlgebraicType(),
    },
    set_tag_active: {
      reducerName: "set_tag_active",
      argsType: SetTagActive.getTypeScriptAlgebraicType(),
    },
    start_game: {
      reducerName: "start_game",
      argsType: StartGame.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "1.3.2",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "AddTag", args: AddTag }
| { name: "ClaimTag", args: ClaimTag }
| { name: "CreateGame", args: CreateGame }
| { name: "EndGame", args: EndGame }
| { name: "RegisterPlayer", args: RegisterPlayer }
| { name: "SetTagActive", args: SetTagActive }
| { name: "StartGame", args: StartGame }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  addTag(tagId: string, gameId: string, clue: string | undefined, orderIndex: number) {
    const __args = { tagId, gameId, clue, orderIndex };
    let __writer = new BinaryWriter(1024);
    AddTag.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("add_tag", __argsBuffer, this.setCallReducerFlags.addTagFlags);
  }

  onAddTag(callback: (ctx: ReducerEventContext, tagId: string, gameId: string, clue: string | undefined, orderIndex: number) => void) {
    this.connection.onReducer("add_tag", callback);
  }

  removeOnAddTag(callback: (ctx: ReducerEventContext, tagId: string, gameId: string, clue: string | undefined, orderIndex: number) => void) {
    this.connection.offReducer("add_tag", callback);
  }

  claimTag(gameId: string, tagId: string) {
    const __args = { gameId, tagId };
    let __writer = new BinaryWriter(1024);
    ClaimTag.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("claim_tag", __argsBuffer, this.setCallReducerFlags.claimTagFlags);
  }

  onClaimTag(callback: (ctx: ReducerEventContext, gameId: string, tagId: string) => void) {
    this.connection.onReducer("claim_tag", callback);
  }

  removeOnClaimTag(callback: (ctx: ReducerEventContext, gameId: string, tagId: string) => void) {
    this.connection.offReducer("claim_tag", callback);
  }

  createGame(gameId: string) {
    const __args = { gameId };
    let __writer = new BinaryWriter(1024);
    CreateGame.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("create_game", __argsBuffer, this.setCallReducerFlags.createGameFlags);
  }

  onCreateGame(callback: (ctx: ReducerEventContext, gameId: string) => void) {
    this.connection.onReducer("create_game", callback);
  }

  removeOnCreateGame(callback: (ctx: ReducerEventContext, gameId: string) => void) {
    this.connection.offReducer("create_game", callback);
  }

  endGame(gameId: string) {
    const __args = { gameId };
    let __writer = new BinaryWriter(1024);
    EndGame.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("end_game", __argsBuffer, this.setCallReducerFlags.endGameFlags);
  }

  onEndGame(callback: (ctx: ReducerEventContext, gameId: string) => void) {
    this.connection.onReducer("end_game", callback);
  }

  removeOnEndGame(callback: (ctx: ReducerEventContext, gameId: string) => void) {
    this.connection.offReducer("end_game", callback);
  }

  registerPlayer(playerId: string, name: string, team: string | undefined) {
    const __args = { playerId, name, team };
    let __writer = new BinaryWriter(1024);
    RegisterPlayer.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("register_player", __argsBuffer, this.setCallReducerFlags.registerPlayerFlags);
  }

  onRegisterPlayer(callback: (ctx: ReducerEventContext, playerId: string, name: string, team: string | undefined) => void) {
    this.connection.onReducer("register_player", callback);
  }

  removeOnRegisterPlayer(callback: (ctx: ReducerEventContext, playerId: string, name: string, team: string | undefined) => void) {
    this.connection.offReducer("register_player", callback);
  }

  setTagActive(tagId: string, isActive: boolean) {
    const __args = { tagId, isActive };
    let __writer = new BinaryWriter(1024);
    SetTagActive.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_tag_active", __argsBuffer, this.setCallReducerFlags.setTagActiveFlags);
  }

  onSetTagActive(callback: (ctx: ReducerEventContext, tagId: string, isActive: boolean) => void) {
    this.connection.onReducer("set_tag_active", callback);
  }

  removeOnSetTagActive(callback: (ctx: ReducerEventContext, tagId: string, isActive: boolean) => void) {
    this.connection.offReducer("set_tag_active", callback);
  }

  startGame(gameId: string) {
    const __args = { gameId };
    let __writer = new BinaryWriter(1024);
    StartGame.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("start_game", __argsBuffer, this.setCallReducerFlags.startGameFlags);
  }

  onStartGame(callback: (ctx: ReducerEventContext, gameId: string) => void) {
    this.connection.onReducer("start_game", callback);
  }

  removeOnStartGame(callback: (ctx: ReducerEventContext, gameId: string) => void) {
    this.connection.offReducer("start_game", callback);
  }

}

export class SetReducerFlags {
  addTagFlags: CallReducerFlags = 'FullUpdate';
  addTag(flags: CallReducerFlags) {
    this.addTagFlags = flags;
  }

  claimTagFlags: CallReducerFlags = 'FullUpdate';
  claimTag(flags: CallReducerFlags) {
    this.claimTagFlags = flags;
  }

  createGameFlags: CallReducerFlags = 'FullUpdate';
  createGame(flags: CallReducerFlags) {
    this.createGameFlags = flags;
  }

  endGameFlags: CallReducerFlags = 'FullUpdate';
  endGame(flags: CallReducerFlags) {
    this.endGameFlags = flags;
  }

  registerPlayerFlags: CallReducerFlags = 'FullUpdate';
  registerPlayer(flags: CallReducerFlags) {
    this.registerPlayerFlags = flags;
  }

  setTagActiveFlags: CallReducerFlags = 'FullUpdate';
  setTagActive(flags: CallReducerFlags) {
    this.setTagActiveFlags = flags;
  }

  startGameFlags: CallReducerFlags = 'FullUpdate';
  startGame(flags: CallReducerFlags) {
    this.startGameFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get games(): GamesTableHandle {
    return new GamesTableHandle(this.connection.clientCache.getOrCreateTable<Game>(REMOTE_MODULE.tables.games));
  }

  get players(): PlayersTableHandle {
    return new PlayersTableHandle(this.connection.clientCache.getOrCreateTable<Player>(REMOTE_MODULE.tables.players));
  }

  get progress(): ProgressTableHandle {
    return new ProgressTableHandle(this.connection.clientCache.getOrCreateTable<Progress>(REMOTE_MODULE.tables.progress));
  }

  get tags(): TagsTableHandle {
    return new TagsTableHandle(this.connection.clientCache.getOrCreateTable<Tag>(REMOTE_MODULE.tables.tags));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
